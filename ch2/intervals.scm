

(define (make-interval x y) (cons (min x y)
                                  (max x y)))
(define lower-bound car)
(define upper-bound cdr)

(define (print-interval interval)
  (display "[")
  (display (lower-bound interval))
  (display ", ")
  (display (upper-bound interval))
  (display "]"))

(define (make-center-width center width)
  (make-interval (- center width)
                 (+ center width)))

(define (center i)
  (/ (+ (upper-bound i) (lower-bound i)) 2))

(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))

(define (make-center-percent center percent)
  (make-center-width center (* center percent)))

(define (tolerance-percent i)
  (/ (width i) (center i)))


(define (add-interval a b)
  (make-interval (+ (lower-bound a) (lower-bound b))
                 (+ (upper-bound a) (upper-bound b))))

(define (sub-interval a b)
  (make-interval (- (lower-bound a) (upper-bound b))
                 (- (upper-bound a) (lower-bound b))))

(define (mul-interval a b)
  (let ((ends (list (* (lower-bound a) (lower-bound b))
                    (* (upper-bound a) (lower-bound b))
                    (* (upper-bound a) (upper-bound b))
                    (* (lower-bound a) (upper-bound b)))))
    (make-interval (apply min ends) (apply max ends))))


(define (fast-mul-interval i1 i2)
  (define (p x) (>= x 0))
  (define (n x) (< x 0))
  (let ((a (lower-bound i1))
        (b (upper-bound i1))
        (x (lower-bound i2))
        (y (upper-bound i2)))
    (cond ((and (p a) (p b) (p x) (p y)) (make-interval (* a x) (* b y)))
          ((and (p a) (p b) (n x) (p y)) (make-interval (* b x) (* b y)))
          ((and (p a) (p b) (n x) (n y)) (make-interval (* b x) (* a y)))
          ((and (n a) (p b) (p x) (p y)) (make-interval (* a y) (* b y)))
          ((and (n a) (p b) (n x) (p y)) (make-interval (min (* a y) (* b x))
                                                        (max (* a x) (* b y))))
          ((and (n a) (p b) (n x) (n y)) (make-interval (* b x) (* a x)))
          ((and (n a) (n b) (p x) (p y)) (make-interval (* a y) (* b x)))
          ((and (n a) (n b) (n x) (p y)) (make-interval (* a y) (* a x)))
          ((and (n a) (n b) (n x) (n y)) (make-interval (* b y) (* a x))))))

(define (inv-interval i)
  (if (> 0 (* (lower-bound i) (upper-bound i)))
      (error "Interval spans 0"))
  (make-interval (/ 1.0 (upper-bound i))
                 (/ 1.0 (lower-bound i))))


(define (eq-interval? a b)
  (and (= (lower-bound a) (lower-bound b))
       (= (upper-bound a) (upper-bound b))))


(define (verify-fast-multiplication a b)
  (eq-interval? (fast-mul-interval a b)
                (mul-interval a b)))


(define (test n)
  (define (random-interval x y)
    (define (random-int)
      (+ x (random (+ 1 (- y x)))))
    (make-interval (random-int) (random-int)))
  (let ((xmin -10)
        (xmax  10))
    (define (test-once)
      (let ((a (random-interval xmin xmax))
            (b (random-interval xmin xmax)))
        (display "Testing ")
        (print-interval a)
        (display " x ")
        (print-interval b)
        (newline)
        (let ((result (fast-mul-interval a b))
              (expected (mul-interval a b)))
          (display "Got:      ")
          (print-interval result)
          (newline)
          (display "Expected: ")
          (print-interval expected)
          (newline)
          (if (eq-interval? result expected)
              (display "OK")
              (error ">>>>>> NOPE"))
          (newline)
          (newline))))
    (define (test-n-time count)
      (define (go k)
        (if (< k count)
            (begin
              (display (+ k 1))
              (display ": ")
              (test-once)
              (go (+ k 1)))))
      (go 0))
    (test-n-time n)))
